var app=angular.module("fbfApp",["ui.router","global","app.config","templates","utils","directives.contact","controller.main","controller.header","controller.contact","controller.contact.add","controller.contact.edit","controller.contact.view","service.contact"]);app.config(["$stateProvider",function(t){t.state("root",{url:"","abstract":!0,data:{},views:{container:{templateUrl:"app/layout/layout.html"},"header@root":{templateUrl:"app/header/header.html",controller:"HeaderCtrl"}}})}]),app.run(["$rootScope","$state","$stateParams","$location",function(t,e,o,n){t.$on("$stateChangeStart",function(t,e,o,n,a){console.debug("$stateChangeStart to "+e.to+"- fired when the transition begins. toState,toParams : \n",e,o)}),t.$on("$stateChangeError",function(t,e,o,n,a,r){console.debug("$stateChangeError - fired when an error occurs during transition."),console.debug(arguments)}),t.$on("$stateChangeSuccess",function(t,e,o,n,a){console.debug("$stateChangeSuccess to "+e.name+"- fired once the state transition is complete.")}),t.$on("$viewContentLoaded",function(t){console.debug("$viewContentLoaded - fired after dom rendered",t)}),t.$on("$stateNotFound",function(t,e,o,n){console.debug("$stateNotFound "+e.to+"  - fired when a state cannot be found by its name."),console.debug(e,o,n)})}]);
"use strict";angular.module("global",[]).factory("GlobalConstant",[function(){return{}}]).factory("global",["$rootScope","APP_CONFIG","ContactService",function(t,n,o){function c(){i.contactListPromise=i.contactService.getContactList(),i.contactListPromise.then(function(t){i.contactList=t.contactList,i.contactMapIdIndex=t.mapIdIndex},function(t){console.error("Getting initial data error")})}t.global=this,t.APP_CONFIG=n,this.contactService=new o(this);var i=this;return this.contactListPromise=null,this.contactList=null,c(),this}]);
"use strict";angular.module("utils",[]).factory("Utils",["rfc4122",function(t){return this.guid=function(){return t.v4()},this.isNumericString=function(t){return/^\d+$/.test(t)},this.isSafari=function(){var t=navigator.userAgent.toLowerCase();return-1!=t.indexOf("safari")?t.indexOf("chrome")<=-1:!1},this.isFireFox=function(){return navigator.userAgent.toLowerCase().indexOf("firefox")>-1},this}]);
"use strict";angular.module("directives.contact",[]).directive("contact",function(){return{restrict:"E",replace:!0,templateUrl:"app/components/directives/contact/contact.html"}});
"use strict";angular.module("service.contact",[]).value("API_PATH","http://ng-training.ratchasak.me/api.php").factory("ContactConstant",[function(){return{STATUS_SUCCESS:1}}]).factory("ContactService",["$q","contactApiManager","Contact",function(t,e,n){function o(t){this.global=t}return o.prototype.getContactList=function(){var o=t.defer();return e.list().then(function(t){for(var e=[],r={},i=0;i<t.length;i++){var a=t[i];a=new n(a.id,a.name,a.email,a.phone,a.url,a.notes),e.push(a),r[a.getId()]=i}o.resolve({contactList:e,mapIdIndex:r})},function(t){o.reject(t)}),o.promise},o}]).factory("Contact",["ContactConstant","API_PATH","$q","$http",function(t,e,n,o){function r(t,e,n,o,r,i){this.id=t,this.name=e,this.email=n,this.phone=o,this.url=r,this.notes=i}var i=e;return r.prototype.getId=function(){return this.id},r.prototype.getName=function(){return this.name},r.prototype.getEmail=function(){return this.email},r.prototype.getPhone=function(){return this.phone},r.prototype.getUrl=function(){return this.url},r.prototype.getNotes=function(){return this.notes},r.prototype.get=function(){var t=n.defer();return o({url:i+"/contact/"+id,method:"GET"}).then(function(e){var n=e.data,o=new r(n.id,n.name,n.email,n.phone,n.url,n.notes);t.resolve(o)},function(e){t.reject(e.data)}),t.promise},r.prototype.edit=function(){var t=n.defer();return o({url:i+"/contact/"+this.id,method:"PUT",data:{name:this.name,email:this.email,phone:this.phone,url:this.url,notes:this.notes}}).then(function(e){t.resolve(e.data)},function(e){t.reject()}),t.promise},r.prototype.add=function(){var t=n.defer();return o({url:i+"/contact",method:"POST",data:{name:this.name,email:this.email,phone:this.phone,url:this.url,notes:this.notes}}).then(function(e){t.resolve(e.data)},function(e){t.reject("Cannot get contact list")}),t.promise},r.prototype["delete"]=function(){var t=n.defer();return o({url:i+"/contact/"+this.id,method:"DELETE"}).then(function(e){t.resolve(e.data)},function(e){t.reject()}),t.promise},r}]).factory("contactApiManager",["$http","$q","API_PATH",function(t,e,n){var o=n;return this.list=function(){var n=e.defer();return t({url:o+"/contact?transform=1",method:"GET"}).then(function(t){n.resolve(t.data.contact)},function(t){n.reject("Cannot get contact list")}),n.promise},this}]);
"use strict";angular.module("controller.header",[]).controller("HeaderCtrl",["$scope","$rootScope",function(t,o){t.nav={navItems:[{state:"root.contact",text:"home"},{state:"root.contact.add",text:"add"}]}}]);
"use strict";angular.module("controller.contact.add",[]).config(["$stateProvider",function(t){t.state("root.contact.add",{url:"/add",views:{"contact_action@root.contact":{templateUrl:"app/add_contact/add_contact.html",controller:"AddContactCtrl",resolve:{contactList:["global",function(t){return t.contactListPromise}]}}}})}]).controller("AddContactCtrl",["$rootScope","$scope","global","Contact","$state",function(t,o,n,c,a){o.currentContact={name:"",email:"",phone:"",url:"",notes:""},o.isDisableButton=!1,o.addContact=function(){var t=new c(0,o.currentContact.name,o.currentContact.email,o.currentContact.phone,o.currentContact.url,o.currentContact.notes);o.isDisableButton=!0,t.add().then(function(o){t.id=o,n.contactList.push(t),n.contactMapIdIndex[o]=n.contactList.length-1,a.go("root.contact",{isEditSuccess:!0})})}}]);
"use strict";angular.module("controller.contact.edit",[]).config(["$stateProvider",function(t){t.state("root.contact.edit",{url:"/edit/:contactId",views:{"contact_action@root.contact":{templateUrl:"app/edit_contact/edit_contact.html",controller:"EditContactCtrl"}}})}]).controller("EditContactCtrl",["$rootScope","$scope","$stateParams","global","$state",function(t,c,o,n,a){var e=o.contactId;c.contactId=e,c.currentContact=n.contactList[n.contactMapIdIndex[e]],c.tmpContact=angular.copy(c.currentContact),c.isDisableButton=!1,c.saveEdit=function(){angular.extend(c.currentContact,c.tmpContact),c.isDisableButton=!0,c.currentContact.edit().then(function(t){a.go("root.contact",{isEditSuccess:t})})}}]);
"use strict";angular.module("controller.contact.view",[]).config(["$stateProvider",function(t){t.state("root.contact.view",{url:"/view/:contactId",views:{"contact_action@root.contact":{templateUrl:"app/view_contact/view_contact.html",controller:"ViewContactCtrl"}}})}]).controller("ViewContactCtrl",["$rootScope","$scope","$stateParams","global","$state",function(t,c,o,e,n){var a=o.contactId;c.currentContact=e.contactList[e.contactMapIdIndex[a]],c.removeContact=function(t){confirm("Are you sure ?")&&t["delete"]().then(function(t){delete e.contactList[e.contactMapIdIndex[a]],n.go("root.contact",{isEditSuccess:!0})})}}]);
"use strict";angular.module("controller.contact",[]).config(["$stateProvider",function(t){t.state("root.contact",{url:"",views:{"container@root":{templateUrl:"app/contact/contact.html",controller:"ContactCtrl"},"contact_list@root.contact":{templateUrl:"app/contact/list_contact.html",controller:"ListContactCtrl",resolve:{contactList:["global",function(t){return t.contactListPromise}]}},"contact_action@root.contact":{templateUrl:"app/contact/not_select_contact.html",controller:"NotSelectContactCtrl"}},params:{isEditSuccess:!1}})}]).controller("ContactCtrl",["$scope","$rootScope",function(t,o){}]).controller("ListContactCtrl",["$scope","global",function(t,o){t.contacts=o.contactList}]).controller("NotSelectContactCtrl",["$scope","$rootScope","$stateParams",function(t,o,c){t.isEditSucess=c.isEditSuccess}]);
"use strict";angular.module("controller.main",[]).controller("MainCtrl",["$scope",function(l){}]);